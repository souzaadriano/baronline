generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Permissions {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  createdAt       DateTime          @default(now())
  updateAt        DateTime          @default(now())
  deletedAt       DateTime?
  RolePermissions RolePermissions[]
  UserPermissions UserPermissions[]

  @@map("permissions")
}

model Roles {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  createdAt       DateTime          @default(now())
  updateAt        DateTime          @default(now())
  deletedAt       DateTime?
  RolePermissions RolePermissions[]
  UserRoles       UserRoles[]

  @@map("roles")
}

model RolePermissions {
  roleId       Int
  permissionId Int
  role         Roles       @relation(fields: [roleId], references: [id])
  permissions  Permissions @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model UserRoles {
  roleId Int
  userId String
  role   Roles  @relation(fields: [roleId], references: [id])
  user   Users  @relation(fields: [userId], references: [id])

  @@id([roleId, userId])
  @@map("user_roles")
}

model UserPermissions {
  permissionId Int
  userId       String
  status       Boolean
  permissions  Permissions @relation(fields: [permissionId], references: [id])
  user         Users       @relation(fields: [userId], references: [id])

  @@id([permissionId, userId])
  @@map("user_permissions")
}

model Brands {
  id                 String               @id
  name               String               @unique
  createdAt          DateTime             @default(now())
  updateAt           DateTime             @default(now())
  deletedAt          DateTime?
  StoreGroup         StoreGroup[]
  UserBrand          UserBrand[]
  BrandConfiguration BrandConfiguration[]
  Categories         Categories[]
  Products           Products[]

  @@map("brands")
}

model Stores {
  id                 String               @id
  name               String               @unique
  createdAt          DateTime             @default(now())
  updateAt           DateTime             @default(now())
  deletedAt          DateTime?
  StoreGroup         StoreGroup[]
  UserStore          UserStore[]
  StoreConfiguration StoreConfiguration[]
  PromotionStores    PromotionStores[]

  @@map("stores")
}

model StoreGroup {
  brandId String
  storeId String

  store Stores @relation(fields: [storeId], references: [id])
  brand Brands @relation(fields: [brandId], references: [id])

  @@id([brandId, storeId])
  @@map("store_group")
}

model UserBrand {
  brandId String
  userId  String

  user  Users  @relation(fields: [userId], references: [id])
  brand Brands @relation(fields: [brandId], references: [id])

  @@id([brandId, userId])
  @@map("user_brand")
}

model UserStore {
  storeId String
  userId  String

  user  Users  @relation(fields: [userId], references: [id])
  store Stores @relation(fields: [storeId], references: [id])

  @@id([storeId, userId])
  @@map("user_store")
}

model ConfigurationTypes {
  name           String           @id()
  Configurations Configurations[]

  @@map("configuration_types")
}

model Configurations {
  id        String    @id()
  type      String
  content   Json
  createdAt DateTime  @default(now())
  updateAt  DateTime  @default(now())
  deletedAt DateTime?

  configurationType  ConfigurationTypes   @relation(fields: [type], references: [name])
  BrandConfiguration BrandConfiguration[]
  StoreConfiguration StoreConfiguration[]

  @@map("configurations")
}

model BrandConfiguration {
  configurationId String
  brandId         String

  configuration Configurations @relation(fields: [configurationId], references: [id])
  brand         Brands         @relation(fields: [brandId], references: [id])

  @@id([configurationId, brandId])
  @@map("brand_configuration")
}

model StoreConfiguration {
  configurationId String
  storeId         String

  configuration Configurations @relation(fields: [configurationId], references: [id])
  store         Stores         @relation(fields: [storeId], references: [id])

  @@id([configurationId, storeId])
  @@map("store_configuration")
}

model Categories {
  id      Int    @id @default(autoincrement())
  brandId String
  name    String

  brand    Brands     @relation(fields: [brandId], references: [id])
  Products Products[]

  @@map("categories")
}

model Products {
  id          String  @id
  brandId     String
  categoryId  Int
  name        String
  description String
  price       Decimal @db.Money
  picture     String
  info        Json

  createdAt DateTime  @default(now())
  updateAt  DateTime  @default(now())
  deletedAt DateTime?

  brand             Brands              @relation(fields: [brandId], references: [id])
  category          Categories          @relation(fields: [categoryId], references: [id])
  PriceHistory      PriceHistory[]
  PromotionProducts PromotionProducts[]

  @@map("products")
}

model PriceHistory {
  productId String
  changedAt DateTime @default(now())
  price     Decimal  @db.Money
  product   Products @relation(fields: [productId], references: [id])

  @@id([productId, changedAt])
  @@map("price_history")
}

model PromotionSales {
  id      String @id
  brandId String

  name    String
  startAt DateTime
  endAt   DateTime
  active  Boolean

  Promotion_Products PromotionProducts[]
  PromotionStores    PromotionStores[]

  @@map("promotion_sales")
}

model PromotionProducts {
  productId   String
  promotionId String
  price       Decimal @db.Money

  promotion PromotionSales @relation(fields: [promotionId], references: [id])
  product   Products       @relation(fields: [productId], references: [id])

  @@id([productId, promotionId])
  @@map("promotion_products")
}

model PromotionStores {
  promotionId String
  storeId     String

  promotion PromotionSales @relation(fields: [promotionId], references: [id])
  store     Stores         @relation(fields: [storeId], references: [id])

  @@id([promotionId, storeId])
  @@map("promotion_stores")
}

model Users {
  id              String            @id
  name            String
  email           String            @unique
  hash            String
  createdAt       DateTime          @default(now())
  updateAt        DateTime          @default(now())
  deletedAt       DateTime?
  UserRoles       UserRoles[]
  UserPermissions UserPermissions[]
  UserBrand       UserBrand[]
  UserStore       UserStore[]

  @@map("users")
}
